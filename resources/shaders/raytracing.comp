#version 430 core

struct Material {
    vec4 color;
    vec4 modifiers;  //First value is reflectivness, second one is transparency
};

struct Sphere {
    vec4 position;
    vec4 radius;
    Material material;
};

struct MeshObject {
    vec4 vertexData[1024];
    mat4 modelMatrix;
    vec4 numTris;
    Material material;
};

struct PointLight {
    vec4 position;
    vec4 color;  //Last vlaue is intensity
};

struct Camera {
    mat4 modelMatrix;
};

struct SceneData {
    MeshObject meshObjects[4];
    Sphere spheres[4];
    PointLight pointLights[4];
    Camera camera;
    int numMeshObjects;
    int numSpheres;
    int numPointLights;
    int screenWidth;
    int screenHeight;
};

struct IntersectionData {
    Material material;
    vec3 position;
    vec3 normal;
    bool hit;
};

struct Ray {
    vec3 origin;
    vec3 direction;
};

struct RTNode {
    IntersectionData intersectionData;
    Ray reflectionRay;
    vec3 reflectionColor;
    bool hasReflectionRay;
    Ray refractionRay;
    vec3 refractionColor;
    bool hasRefractionRay;
    float fresnel;
    vec3 combinedColor;
};

layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2D img_output;
layout(std430, binding = 1) buffer sceneDataBuffer {
    SceneData sceneData;
};

vec3 raytracePixel(vec3 origin, vec3 dir);
RTNode raytraceRay(Ray ray, int depth);
IntersectionData raycastObjects(vec3 origin, vec3 dir);

void main() {
    vec4 pixelColor = vec4(1.0, 0.0, 0.0, 1.0);

    //Constants and definitions
    const float pi = 3.14159f;

    //Computing ray direction
    float invWidth = 1 / float(sceneData.screenWidth), invHeight = 1 / float(sceneData.screenHeight);
    float fov = 30;
    float aspectratio = sceneData.screenWidth / float(sceneData.screenHeight);
    float angle = tan(pi * 0.5 * fov / 180.0f);
    float xx = (2 * ((gl_GlobalInvocationID.x + 0.5) * invWidth) - 1) * angle * aspectratio;
    float yy = -(1 - 2 * ((gl_GlobalInvocationID.y + 0.5) * invHeight)) * angle;  //Y-Axis is flipped

    //Calculating the camera ray with camera transformations in mind
    vec4 camPosWorld = sceneData.camera.modelMatrix * vec4(0, 0, 0, 1);
    vec4 projectionRayWorld = sceneData.camera.modelMatrix * vec4(xx, yy, 1, 1);
    vec4 projectionRayDirWorld = projectionRayWorld - camPosWorld;
    projectionRayDirWorld = normalize(projectionRayDirWorld);

    //Actual raytracing
    pixelColor.xyz = raytracePixel(camPosWorld.xyz, projectionRayDirWorld.xyz);

    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    imageStore(img_output, pixel_coords, pixelColor);
}

RTNode raytraceRay(Ray ray, int depth) {
    IntersectionData intersect = raycastObjects(ray.origin, ray.direction);
    RTNode node;
    node.intersectionData = intersect;

    if ((intersect.material.modifiers.x > 0.0f || intersect.material.modifiers.y > 0.0f) && depth < 5) {
        //Reflective and refractive color computation
        bool inObject = false;
        vec3 norm = intersect.normal;
        if (dot(ray.direction, norm) > 0) {
            norm = -norm;
            inObject = true;
        }

        float facingRatio = -dot(ray.direction, norm);
        float fresnel = mix(pow(1 - facingRatio, 3), 1.0f, 0.1f);
        node.fresnel = fresnel;

        vec3 reflectionDir = ray.direction - norm * 2.0f * dot(ray.direction, norm);
        reflectionDir = normalize(reflectionDir);

        vec3 newRayOrigin = intersect.position + norm * 0.0001f;

        Ray reflectionRay = Ray(newRayOrigin, reflectionDir);
        node.reflectionRay = reflectionRay;
        node.hasReflectionRay = true;

        if (intersect.material.modifiers.y > 0.0f) {
            float ior = 1.1f;  //Index of refraction
            float eta = ior;
            if (!inObject) {
                eta = 1.0f / ior;
            }
            float cosi = -dot(ray.direction, norm);
            float k = 1 - eta * eta * (1 - cosi * cosi);
            vec3 refractionDir = ray.direction * eta + norm * (eta * cosi - sqrt(k));
            refractionDir = normalize(refractionDir);
            newRayOrigin = intersect.position - norm * 0.0001f;

            Ray refractionRay = Ray(newRayOrigin, refractionDir);
            node.reflectionRay = refractionRay;
            node.hasRefractionRay = true;
        }
    } else {
        //Diffuse color computation
        for (int i = 0; i < sceneData.numPointLights; i++) {
            float dst = distance(intersect.position, sceneData.pointLights[i].position.xyz);
            if (dst < 1.0f) {
                dst = 1.0f;
            }

            vec3 shadowRayDir = sceneData.pointLights[i].position.xyz - intersect.position;
            vec3 norm = intersect.normal;
            shadowRayDir = normalize(shadowRayDir);

            vec3 newRayOrigin = intersect.position + norm * 0.001f;
            IntersectionData shadowIntersect = raycastObjects(newRayOrigin, shadowRayDir);

            if (!shadowIntersect.hit) {
                //Diffuse color calculation. Light intensity uses the inverse square law with a scaling modifier
                node.combinedColor += intersect.material.color.xyz * 1.0f * max(0.0f, dot(norm, shadowRayDir)) * sceneData.pointLights[i].color.xyz * sceneData.pointLights[i].color.w * 1.0f / pow(dst, 0.01f);
            }
        }
    }
    return node;
}

vec3 raytracePixel(vec3 origin, vec3 dir) {
    //Constants and definitions
    const int maxDepth = 5;
    const int maxNodes = 63;  //Basically pow(2, maxDepth + 1) - 1

    RTNode raytracingArray[maxNodes];

    //Build raytracing tree structure
    for (int i = 0; i < maxNodes; i++) {
        int parent = int(i - 1 / 2);
        int depth = int(log2(i + 1));
        if (parent >= 0) {
            if (i == 2 * parent + 1) {
                raytracingArray[i] = raytraceRay(raytracingArray[parent].reflectionRay, depth);
            } else if (i == 2 * parent + 2) {
                raytracingArray[i] = raytraceRay(raytracingArray[parent].refractionRay, depth);
            }
        } else {
            raytracingArray[i] = raytraceRay(Ray(origin, dir), depth);
        }
    }

    //Backtrack from last node to the first
    for (int i = maxNodes - 1; i >= 0; i--) {
        int parentIndex = int(i - 1 / 2);
        RTNode parent = raytracingArray[parentIndex];
        RTNode current = raytracingArray[i];

        //Is leaf or inner node?
        if (i >= pow(2, maxDepth) - 1) {
            if (2 * parentIndex + 1 == i && parent.hasReflectionRay) {
                parent.reflectionColor = current.combinedColor;
            } else if (2 * parentIndex + 2 == i && parent.hasRefractionRay) {
                parent.refractionColor = current.combinedColor;
            }
        } else {
            current.combinedColor = (current.reflectionColor * current.fresnel * current.intersectionData.material.modifiers.x + current.refractionColor * (1 - current.fresnel) * current.intersectionData.material.modifiers.y) * current.intersectionData.material.color.xyz;

            if (2 * parentIndex + 1 == i && parent.hasReflectionRay) {
                parent.reflectionColor = current.combinedColor;
            } else if (2 * parentIndex + 2 == i && parent.hasRefractionRay) {
                parent.refractionColor = current.combinedColor;
            }
        }
    }

    return raytracingArray[0].combinedColor;
}

IntersectionData raycastObjects(vec3 origin, vec3 rayDir) {
    IntersectionData closestIntersect;
    closestIntersect.hit = false;
    closestIntersect.position = vec3(0, 0, 0);
    float dst = 9999999.0f;

    //Mesh raycasting
    for (int m = 0; m < sceneData.numMeshObjects; m++) {
        for (int i = 0; i < sceneData.meshObjects[m].numTris.x * 3; i += 3) {
            //Möller–Trumbore intersection algorithm
            vec3 vertex0 = (sceneData.meshObjects[m].modelMatrix * sceneData.meshObjects[m].vertexData[i]).xyz;
            vec3 vertex1 = (sceneData.meshObjects[m].modelMatrix * sceneData.meshObjects[m].vertexData[i + 1]).xyz;
            vec3 vertex2 = (sceneData.meshObjects[m].modelMatrix * sceneData.meshObjects[m].vertexData[i + 2]).xyz;

            vec3 edge1 = vertex1 - vertex0;
            vec3 edge2 = vertex2 - vertex0;

            vec3 pvec = cross(rayDir, edge2);

            float det = dot(edge1, pvec);
            float epsilon = 0.0000001f;

            if (det < epsilon) {
                continue;
            }

            float invDet = 1.0f / det;

            vec3 tvec = origin - vertex0;

            float x = dot(tvec, pvec) * invDet;
            if (x < 0.0f || x > 1.0f) {
                continue;
            }

            vec3 qvec = cross(tvec, edge1);
            float y = dot(rayDir, qvec) * invDet;
            if (y < 0.0f || x + y > 1.0f) {
                continue;
            }

            float z = dot(edge2, qvec) * invDet;

            vec3 intersect = vertex0 + edge2 * x + edge1 * y;
            vec3 norm = cross(edge1, edge2);
            norm = normalize(norm);
            norm = norm * 0.00001f;
            intersect = intersect + norm;

            if (z < epsilon) {
                continue;
            }

            if (distance(intersect, origin) < dst) {
                dst = distance(intersect, origin);
                vec3 tris[3];
                tris[0] = vertex0;
                tris[1] = vertex1;
                tris[2] = vertex2;
                closestIntersect = IntersectionData(sceneData.meshObjects[m].material, intersect, norm, true);
            }
        }
    }

    //Sphere raycasting
    for (int s = 0; s < sceneData.numSpheres; s++) {
        vec3 centerOrigin = sceneData.spheres[s].position.xyz - origin;
        float tco = dot(centerOrigin, rayDir);
        if (tco < 0) {
            continue;
        }
        float dstToCenterSqr = dot(centerOrigin, centerOrigin) - (tco * tco);
        float radiusSquared = sceneData.spheres[s].radius.x * sceneData.spheres[s].radius.x;
        if (dstToCenterSqr > radiusSquared) {
            continue;
        }
        float thc = sqrt(radiusSquared - dstToCenterSqr);
        float th0 = tco - thc;
        float th1 = tco + thc;
        if (th0 > th1) {
            float temp = th0;
            th0 = th1;
            th1 = temp;
        }
        if (th0 < 0) {
            th0 = th1;
            if (th0 < 0) {
                continue;
            }
        }
        vec3 hitPos = origin + th0 * rayDir;
        vec3 normal = normalize((hitPos - sceneData.spheres[s].position.xyz) / sceneData.spheres[s].radius.x);

        if (distance(hitPos, origin) < dst) {
            closestIntersect = IntersectionData(sceneData.spheres[s].material, hitPos, normal, true);
        }
    }
    return closestIntersect;
}